generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  bio           String?   @db.Text
  age           Int?
  gender        String?
  location      String?
  occupation    String?
  interests     String[]
  accounts      Account[]
  sessions      Session[]
  photos        Photo[]
  likes         Like[]    @relation("UserLikes")
  likedBy       Like[]    @relation("LikedByUsers")
  matches       Match[]   @relation("UserMatches")
  matchedWith   Match[]   @relation("MatchedWithUsers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  likedId   String
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  likedUser User     @relation("LikedByUsers", fields: [likedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, likedId])
}

model Match {
  id        String   @id @default(cuid())
  userId    String
  matchedId String
  user      User     @relation("UserMatches", fields: [userId], references: [id], onDelete: Cascade)
  matchedUser User   @relation("MatchedWithUsers", fields: [matchedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, matchedId])
}