// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  sentLikes     Like[]    @relation("SentLikes")
  receivedLikes Like[]    @relation("ReceivedLikes")
  matches       Match[]   @relation("UserMatches")
  messages      Message[] @relation("UserMessages")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?  @db.Text
  gender      String?
  birthDate   DateTime?
  location    String?
  interests   String[]
  occupation  String?
  education   String?
  photos      Photo[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  profileId String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Like {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())

  sender      User     @relation("SentLikes", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedLikes", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Match {
  id        String    @id @default(cuid())
  users     User[]    @relation("UserMatches")
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  matchId   String
  senderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender    User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@index([senderId])
}
